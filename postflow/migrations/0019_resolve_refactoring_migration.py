# Generated by Django 5.2.7 on 2025-10-29 20:42
# This migration resolves the refactoring conflict between old and new migration paths

from django.db import migrations, models


def migrate_data_if_needed(apps, schema_editor):
    """
    Migrate Instagram and Mastodon accounts to their new app tables if not already migrated.
    This handles:
    1. Fresh deployments (no data to migrate, new tables already exist)
    2. Existing deployments that need data migration
    """
    from django.db import connection

    try:
        # Try to get the old models - they may not exist in fresh installs
        OldInstagram = apps.get_model('postflow', 'InstagramBusinessAccount')
        OldMastodon = apps.get_model('postflow', 'MastodonAccount')
    except LookupError:
        # Models don't exist in fresh install, nothing to migrate
        return

    NewInstagram = apps.get_model('instagram', 'InstagramBusinessAccount')
    NewMastodon = apps.get_model('pixelfed', 'MastodonAccount')

    # Check if old tables exist (for existing installations that need data migration)
    with connection.cursor() as cursor:
        try:
            cursor.execute("""
                SELECT EXISTS (
                    SELECT 1 FROM information_schema.tables
                    WHERE table_schema = 'public'
                    AND table_name = 'postflow_instagrambusinessaccount'
                )
            """)
            instagram_table_exists = cursor.fetchone()[0]
        except Exception:
            instagram_table_exists = False

        try:
            cursor.execute("""
                SELECT EXISTS (
                    SELECT 1 FROM information_schema.tables
                    WHERE table_schema = 'public'
                    AND table_name = 'postflow_mastodonaccount'
                )
            """)
            mastodon_table_exists = cursor.fetchone()[0]
        except Exception:
            mastodon_table_exists = False

    # Migrate Instagram accounts if old table exists and new table is empty
    if instagram_table_exists and not NewInstagram.objects.exists():
        for old_account in OldInstagram.objects.using(schema_editor.connection.alias).all():
            NewInstagram.objects.using(schema_editor.connection.alias).create(
                id=old_account.id,
                user=old_account.user,
                instagram_id=old_account.instagram_id,
                username=old_account.username,
                access_token=old_account.access_token,
                expires_at=old_account.expires_at,
                last_refreshed_at=old_account.last_refreshed_at,
            )

    # Migrate Mastodon accounts if old table exists and new table is empty
    if mastodon_table_exists and not NewMastodon.objects.exists():
        for old_account in OldMastodon.objects.using(schema_editor.connection.alias).all():
            NewMastodon.objects.using(schema_editor.connection.alias).create(
                id=old_account.id,
                user=old_account.user,
                instance_url=old_account.instance_url,
                access_token=old_account.access_token,
                username=old_account.username,
            )


def reverse_data(apps, schema_editor):
    """Reverse is not needed as we're just copying data, not deleting it"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('postflow', '0018_remove_mastodonaccount_user_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_data_if_needed, reverse_data),
        migrations.AlterField(
            model_name='scheduledpost',
            name='instagram_accounts',
            field=models.ManyToManyField(blank=True, to='instagram.instagrambusinessaccount'),
        ),
        migrations.AlterField(
            model_name='scheduledpost',
            name='mastodon_accounts',
            field=models.ManyToManyField(blank=True, to='pixelfed.mastodonaccount'),
        ),
    ]
